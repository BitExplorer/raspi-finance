spring.profiles.active=local
server.port=${SERVER_PORT}
security.require-ssl=false
#server.ssl.key-store-type=PKCS12
#server.ssl.key-store-type=JKS
#server.ssl.key-alias=tomcat
#server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-password=secret
#server.ssl.key-password=another-secret

# access to localhost:8080/beans
# access to localhost:8080/actuator/beans
# access to localhost:8080/actuator/health
# access to localhost:8080/actuator/metrics
#management.security.enabled=false
endpoints.sensitive=true
#management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=info, health, metrics

management.endpoints.web.exposure.include=*
management.metrics.tag.host=windows10
management.metrics.tag.application=raspi_finance
management.metrics.export.influx.enabled=true
management.metrics.export.influx.auto-create-db=true
management.metrics.export.influx.db=metrics
management.metrics.export.influx.compressed=false
management.metrics.export.influx.step=1m
management.metrics.export.influx.uri=192.168.100.135:8086
management.health.show-details=always

# ===============================
# = SSL Setup
# ===============================
# Define a custom port instead of the default 8080
#server.port=8443
# Tell Spring Security (if used) to require requests over HTTPS
#security.require-ssl=true
# The format used for the keystore
#server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore.p12
# The password used to generate the certificate
#server.ssl.key-store-password=password
# The alias mapped to the certificate
#server.ssl.key-alias=tomcat

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=${DATASOURCE}
spring.datasource.username=${DATASOURCE_USERNAME}
spring.datasource.password=${DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=${DATASOURCE_DRIVER}
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
#spring.datasource.testOnBorrow=true
# If you want to use the data-h2.sql
spring.datasource.platform=${DATASOURCE_PLATFORM}
spring.datasource.continueOnError=false
spring.datasource.schema=classpath:schema-h2.sql
spring.datasource.data=classpath:data-h2.sql

#spring.datasource.driver-class-name - correct?
#spring.database.driverClassName=org.postgresql.Driver
#spring.datasource.driverClassName=org.postgresql.Driver - correct?

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=DEBUG
spring.datasource.initialization-mode=always
spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.properties.hibernate.jdbc.time_zone = UTC
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#none is build from schema.sql (no Java classes)
#update only add new tables in the schema.sql (starting from Java classes)
spring.jpa.hibernate.ddl-auto=${HIBERNATE_DDL}

# ===============================
# = Project
# ===============================
project.json-files-input-path=${JSON_FILES_INPUT_PATH}

# ===============================
# = ActiveMQ
# ===============================
#spring.activemq.broker-url=tcp://${AMQ_BROKER}:61616
#spring.activemq.broker-url=stomp+ssl://${AMQ_BROKER}:61612
spring.activemq.broker-url=${AMQ_BROKER_URL}
spring.activemq.user=${AMQ_USERNAME}
spring.activemq.password=${AMQ_PASSWORD}
#spring.activemq.in-memory=true
#spring.activemq.pool.enabled=false
project.queue.receive-timeout=2000
activemq-ssl.beans.enabled=${ACTIVEMQ_SSL_BEANS_ENABLED}
activemq-non-ssl.beans.enabled=${ACTIVEMQ_NONSSL_BEANS_ENABLED}

# ===============================
# = Active MQ
# ===============================
project.activemq.inMemory=false
project.activemq.pooled=true
project.activemq.username=${AMQ_USERNAME}
project.activemq.password=${AMQ_PASSWORD}
project.activemq.scheme=${AMQ_SCHEME}
project.activemq.hostname=${AMQ_HOSTNAME}
project.activemq.port=${AMQ_PORTNUMBER}
project.activemq.truststore=${SSL_TRUSTSTORE}
project.activemq.truststorePassword=${SSL_TRUSTSTORE_PASSOWRD}
project.activemq.keystorePassword=${SSL_KEYSTORE_PASSOWRD}
project.activemq.keystore=${SSL_KEYSTORE}
project.activemq.receiveTimeout=2000

# ===============================
# = SSL
# ===============================
project.ssl.truststore=${SSL_TRUSTSTORE}
project.ssl.truststore-password=${SSL_TRUSTSTORE_PASSOWRD}
project.ssl.keystore=${SSL_KEYSTORE}
project.ssl.keystore-password=${SSL_KEYSTORE_PASSOWRD}
project.ssl.enabled=${ACTIVEMQ_SSL_ENABLE}

# ===============================
# = Camel
# ===============================
# the name of Camel
#camel.springboot.name=SampleCamel
camel.health.check.routes.enabled=false

# ===============================
# = MongoDB
# ===============================
spring.data.mongodb.database=${MONGO_DATABASE}
spring.data.mongodb.host=${MONGO_HOSTNAME}
spring.data.mongodb.port=${MONGO_PORT}
spring.data.mongodb.uri=${MONGO_URI}

spring.main.allow-bean-definition-overriding=true

# ===============================
# = Thymeleaf
# ===============================
#spring.thymeleaf.check-template-location=true
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html
spring.thymeleaf.cache=false

# ===============================
# = Kafka Properties
# ===============================
project.kafka.serverNamePort=hornsup:9092
project.kafka.zookeeperServerPort=hornsup:2181
project.kafka.topic=ynot
project.kafka.sslKeystore=${SSL_KEYSTORE}
project.kafka.sslKeystorePassword=${SSL_KEYSTORE_PASSOWRD}
project.kafka.sslTruststore=${SSL_TRUSTSTORE}
project.kafka.sslTruststorePassword=${SSL_TRUSTSTORE_PASSOWRD}

#kebab-case '-' separated
spring-dbuserservice-driverClassName=org.h2.Driver
spring-dbuserservice-url=jdbc:h2:mem:finance_db;DB_CLOSE_DELAY=-1
spring-dbuserservice-password=
spring-dbuserservice-username=sa
